Написать небольшой сервис, который имеет один post запрос.  
Использовать domain driven development.
Прикрутить сваггер.
Данные будут сохраняться в mysql.  +
При разворачивании проекта необходимо использовать докер.

POST запрос 'api/v1/user' принимает след. данные:
{
  userId: number,
  userName: string,
  userOldPassword: string,
  userNewPassword: string,
  signature: string,
}

userId, userName, userOldPassword, userNewPassword - генерируешь сам   +
signature - секьюрити для запроса, генерируется след. образом:    
0. Сгенерировать себе ключ, положить в переменные окружения.   +
1. Взять метод запроса, урл запроса, параметры запроса сконкатинировать их через 'and' и зашифровать при помощи md5. (Только для простоты тестового задания, в своих решениях не использовать md5 не использовать, небезопасно!). При этом параметры из body для конкатенации должны быть отсортированы по ключу (не забудь про ситуацию со вложенными объектами).   +
Пример: 
method: POST
url: 'api/v1/user'
body: {
  userId: 10,
  userName: 'Greg',
  userOldPassword: 'strongPassword',
  userNewPassword: 'veryStrongPassword',
}

 в signature должна получится такая строка (до шифрования) 'POSTandapi/v1/useranduserId=10anduserName=GreganduserNewPassword=veryStrongPasswordanduserOldPassword=strongPassword' - и эту строку зашифровать.  +
 
Обработка запроса:
0. Проверка signature, если не совпадает - 403.   +
1. Валидация. Проверка на типы параметров и на то, что все они обязательны. - елси что-то не так 400   +
2. Ищем пользователя и смотрим, чтобы userOldPassword совпадал с сохраненным в базе.    +

Бизнес логика:  +
Если у пользователя факториал от его id минус число фибоначи по номеру его id взятое по модулю 
- четное число относим его к группе 1, 
- нечетное - группа ищем по базе юзера с таким же именем. Если есть совпадения - группа 2, если нет совпадений - группа 3


Таблица в бд должа иметь след колонки
id userNameHashed userPasswordEncrypted group


Хэширование userName делать при помощи алгоритма sha256
Шифрование пароля делать при помощи алгоритма aes-256-cbc
Сгенерировать hashSecret и encryptKey самостоятельно. 




Покрыть юнит и е2е тестами


//encrypt code
https://gist.github.com/siwalikm/8311cf0a287b98ef67c73c1b03b47154

{
  "userId": 10,
  "userName":'strongPassword',
  "userOldPassword":'strongPassword',
  "userNewPassword":'veryStrongPassword',
  "signature": string
}


http://localhost:3000/swagger/
http://localhost:3000/api/v1/user
